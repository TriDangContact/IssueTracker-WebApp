{"version":3,"sources":["webpack:///./src/graphQLFetch.js"],"names":["dotenv","config","dateRegex","RegExp","jsonDateReviver","key","value","test","Date","graphQLFetch","query","variables","showError","apiEndpoint","__isBrowser__","window","process","env","UI_SERVER_API_ENDPOINT","response","fetch","method","credentials","headers","body","JSON","stringify","text","result","parse","errors","error","extensions","code","details","exception","join","message","data","e","alert"],"mappings":";;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACAA,6CAAM,CAACC,MAAP;AAEA,MAAMC,SAAS,GAAG,IAAIC,MAAJ,CAAW,6BAAX,CAAlB;;AAEA,SAASC,eAAT,CAAyBC,GAAzB,EAA8BC,KAA9B,EAAqC;AACpC,MAAIJ,SAAS,CAACK,IAAV,CAAeD,KAAf,CAAJ,EAA2B,OAAO,IAAIE,IAAJ,CAASF,KAAT,CAAP;AAC3B,SAAOA,KAAP;AACA,C,CAED;;;AACe,eAAeG,YAAf,CACdC,KADc,EAEdC,SAAS,GAAG,EAFE,EAGdC,SAAS,GAAG,IAHE,EAIb;AACD;AACA,QAAMC,WAAW,GAAGC,MAAa,CAAC;AAAD,IAC9BC,SAD8B,GAE9BC,OAAO,CAACC,GAAR,CAAYC,sBAFf;;AAIA,MAAI;AACH,UAAMC,QAAQ,GAAG,MAAMC,uDAAK,CAACP,WAAD,EAAc;AACzCQ,YAAM,EAAE,MADiC;AAEzCC,iBAAW,EAAE,SAF4B;AAGzCC,aAAO,EAAE;AAAE,wBAAgB;AAAlB,OAHgC;AAIzCC,UAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEhB,aAAF;AAASC;AAAT,OAAf;AAJmC,KAAd,CAA5B;AAMA,UAAMa,IAAI,GAAG,MAAML,QAAQ,CAACQ,IAAT,EAAnB;AACA,UAAMC,MAAM,GAAGH,IAAI,CAACI,KAAL,CAAWL,IAAX,EAAiBpB,eAAjB,CAAf;;AAEA,QAAIwB,MAAM,CAACE,MAAX,EAAmB;AAClB,YAAMC,KAAK,GAAGH,MAAM,CAACE,MAAP,CAAc,CAAd,CAAd;;AACA,UAAIC,KAAK,CAACC,UAAN,CAAiBC,IAAjB,IAAyB,gBAA7B,EAA+C;AAC9C,cAAMC,OAAO,GAAGH,KAAK,CAACC,UAAN,CAAiBG,SAAjB,CAA2BL,MAA3B,CAAkCM,IAAlC,CAAuC,KAAvC,CAAhB,CAD8C,CAE9C;;AACA,YAAIxB,SAAJ,EAAe;AACdA,mBAAS,CAAE,GAAEmB,KAAK,CAACM,OAAQ,MAAKH,OAAQ,EAA/B,CAAT;AACA;AACD,OAND,MAMO,IAAItB,SAAJ,EAAe;AACrBA,iBAAS,CAAE,GAAEmB,KAAK,CAACC,UAAN,CAAiBC,IAAK,IAAGF,KAAK,CAACM,OAAQ,EAA3C,CAAT,CADqB,CAErB;AACA;AACD;;AACD,WAAOT,MAAM,CAACU,IAAd;AACA,GAxBD,CAwBE,OAAOC,CAAP,EAAU;AACX,QAAI3B,SAAJ,EAAe;AACdA,eAAS,CAAE,oCAAmC2B,CAAC,CAACF,OAAQ,EAA/C,CAAT;AACA,aAAO,IAAP;AACA;;AACDG,SAAK,CAAE,oCAAmCD,CAAC,CAACF,OAAQ,EAA/C,CAAL;AACA;AACD,C","file":"server.8885b99220a27bcf0961.hot-update.js","sourcesContent":["import fetch from 'isomorphic-fetch';\nimport dotenv from 'dotenv';\ndotenv.config();\n\nconst dateRegex = new RegExp('^\\\\d\\\\d\\\\d\\\\d-\\\\d\\\\d-\\\\d\\\\d');\n\nfunction jsonDateReviver(key, value) {\n\tif (dateRegex.test(value)) return new Date(value);\n\treturn value;\n}\n\n// generic function that helps us handle errors from API calls\nexport default async function graphQLFetch(\n\tquery,\n\tvariables = {},\n\tshowError = null\n) {\n\t// check if we're calling in browser rendered or server rendered mode\n\tconst apiEndpoint = __isBrowser__ // eslint-disable-line no-undef\n\t\t? window.ENV.UI_API_ENDPOINT\n\t\t: process.env.UI_SERVER_API_ENDPOINT;\n\n\ttry {\n\t\tconst response = await fetch(apiEndpoint, {\n\t\t\tmethod: 'POST',\n\t\t\tcredentials: 'include',\n\t\t\theaders: { 'Content-Type': 'application/json' },\n\t\t\tbody: JSON.stringify({ query, variables })\n\t\t});\n\t\tconst body = await response.text();\n\t\tconst result = JSON.parse(body, jsonDateReviver);\n\n\t\tif (result.errors) {\n\t\t\tconst error = result.errors[0];\n\t\t\tif (error.extensions.code == 'BAD_USER_INPUT') {\n\t\t\t\tconst details = error.extensions.exception.errors.join('\\n ');\n\t\t\t\t// alert(`${error.message}:\\n ${details}`);\n\t\t\t\tif (showError) {\n\t\t\t\t\tshowError(`${error.message}:\\n${details}`);\n\t\t\t\t}\n\t\t\t} else if (showError) {\n\t\t\t\tshowError(`${error.extensions.code}:${error.message}`);\n\t\t\t\t// alert(`${error.extensions.code}: ${error.message}`);\n\t\t\t}\n\t\t}\n\t\treturn result.data;\n\t} catch (e) {\n\t\tif (showError) {\n\t\t\tshowError(`Error in sending data to server: ${e.message}`);\n\t\t\treturn null;\n\t\t}\n\t\talert(`Error in sending data to server: ${e.message}`);\n\t}\n}\n"],"sourceRoot":""}